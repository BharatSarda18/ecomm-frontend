{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchLoggedInUser, fetchLoggedInUserOrders, updateUser } from \"../services/userService\";\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk('user/fetchLoggedInUserOrders', async () => {\n  const response = await fetchLoggedInUserOrders();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchLoggedInUserAsync = createAsyncThunk('user/fetchLoggedInUser', async () => {\n  const response = await fetchLoggedInUser();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateUserAsync = createAsyncThunk('user/updateUser', async update => {\n  // this is name mistake\n  const response = await updateUser(update);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    status: 'idle',\n    userInfo: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchLoggedInUserOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userInfo.orders = action.payload.data;\n    }).addCase(updateUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      // earlier there was loggedInUser variable in other slice\n      state.userInfo = action.payload.data;\n    }).addCase(fetchLoggedInUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      // this info can be different or more from logged-in User info\n      state.userInfo = action.payload.data;\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchLoggedInUser","fetchLoggedInUserOrders","updateUser","fetchLoggedInUserOrderAsync","response","data","fetchLoggedInUserAsync","updateUserAsync","update","userSlice","name","initialState","status","userInfo","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","orders","payload","reducer"],"sources":["/home/bharat/myprojects/myecommerce-app/react-ecommerce/src/redux/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchLoggedInUser,fetchLoggedInUserOrders ,updateUser} from \"../services/userService\";\n\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk(\n  'user/fetchLoggedInUserOrders',\n  async () => {\n    const response = await fetchLoggedInUserOrders();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchLoggedInUserAsync = createAsyncThunk(\n  'user/fetchLoggedInUser',\n  async () => {\n    const response = await fetchLoggedInUser();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const updateUserAsync = createAsyncThunk(\n  'user/updateUser',\n  async (update) => {\n    // this is name mistake\n    const response = await updateUser(update);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    status: 'idle',\n    userInfo: null, \n  },\n  reducers: { },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchLoggedInUserOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.userInfo.orders = action.payload.data;\n\n      })\n      .addCase(updateUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        // earlier there was loggedInUser variable in other slice\n        state.userInfo = action.payload.data;\n      })\n      .addCase(fetchLoggedInUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        // this info can be different or more from logged-in User info\n        state.userInfo = action.payload.data;\n      });\n   }\n});\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,iBAAiB,EAACC,uBAAuB,EAAEC,UAAU,QAAO,yBAAyB;AAE9F,OAAO,MAAMC,2BAA2B,GAAGL,gBAAgB,CACzD,8BAA8B,EAC9B,YAAY;EACV,MAAMM,QAAQ,GAAG,MAAMH,uBAAuB,CAAC,CAAC;EAChD;EACA,OAAOG,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAGR,gBAAgB,CACpD,wBAAwB,EACxB,YAAY;EACV,MAAMM,QAAQ,GAAG,MAAMJ,iBAAiB,CAAC,CAAC;EAC1C;EACA,OAAOI,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAME,eAAe,GAAGT,gBAAgB,CAC7C,iBAAiB,EACjB,MAAOU,MAAM,IAAK;EAChB;EACA,MAAMJ,QAAQ,GAAG,MAAMF,UAAU,CAACM,MAAM,CAAC;EACzC;EACA,OAAOJ,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAGD,OAAO,MAAMI,SAAS,GAAGV,WAAW,CAAC;EACnCW,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,MAAM,EAAE,MAAM;IACdC,QAAQ,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE,CAAE,CAAC;EACbC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,2BAA2B,CAACe,OAAO,EAAGC,KAAK,IAAK;MACvDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACd,2BAA2B,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjEF,KAAK,CAACP,MAAM,GAAG,MAAM;MACrBO,KAAK,CAACN,QAAQ,CAACS,MAAM,GAAGD,MAAM,CAACE,OAAO,CAAClB,IAAI;IAE7C,CAAC,CAAC,CACDY,OAAO,CAACV,eAAe,CAACW,OAAO,EAAGC,KAAK,IAAK;MAC3CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACV,eAAe,CAACa,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACP,MAAM,GAAG,MAAM;MACrB;MACAO,KAAK,CAACN,QAAQ,GAAGQ,MAAM,CAACE,OAAO,CAAClB,IAAI;IACtC,CAAC,CAAC,CACDY,OAAO,CAACX,sBAAsB,CAACY,OAAO,EAAGC,KAAK,IAAK;MAClDA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACX,sBAAsB,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5DF,KAAK,CAACP,MAAM,GAAG,MAAM;MACrB;MACAO,KAAK,CAACN,QAAQ,GAAGQ,MAAM,CAACE,OAAO,CAAClB,IAAI;IACtC,CAAC,CAAC;EACL;AACH,CAAC,CAAC;AAEF,eAAeI,SAAS,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}