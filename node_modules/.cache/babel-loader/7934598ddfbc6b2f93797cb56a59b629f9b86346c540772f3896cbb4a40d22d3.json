{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { createOrder } from \"../services/orderService\";\nup;\nexport const createOrderAsync = createAsyncThunk('order/createOrder', async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateOrderAsync = createAsyncThunk('order/updateOrder', async order => {\n  const response = await updateOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchAllOrdersAsync = createAsyncThunk('order/fetchAllOrders', async ({\n  sort,\n  pagination\n}) => {\n  const response = await fetchAllOrders(sort, pagination);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const orderSlice = createSlice({\n  name: \"order\",\n  initialState: {\n    orders: [],\n    status: 'idle',\n    currentOrder: null,\n    totalOrders: 0\n  },\n  reducers: {\n    resetOrder: state => {\n      state.currentOrder = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {}).addCase(createOrderAsync.fulfilled, state => {}).addCase(createOrderAsync.rejected, state => {});\n    builder.addCase(updateOrderAsync.pending, state => {}).addCase(updateOrderAsync.fulfilled, state => {}).addCase(updateOrderAsync.rejected, state => {});\n    builder.addCase(fetchAllOrdersAsync.pending, state => {}).addCase(fetchAllOrdersAsync.fulfilled, state => {}).addCase(fetchAllOrdersAsync.rejected, state => {});\n  }\n});\nexport default orderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","up","createOrderAsync","order","response","data","updateOrderAsync","updateOrder","fetchAllOrdersAsync","sort","pagination","fetchAllOrders","orderSlice","name","initialState","orders","status","currentOrder","totalOrders","reducers","resetOrder","state","extraReducers","builder","addCase","pending","fulfilled","rejected","reducer"],"sources":["/home/bharat/myprojects/myecommerce-app/react-ecommerce/src/redux/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { createOrder } from \"../services/orderService\";\nup\nexport const createOrderAsync = createAsyncThunk(\n    'order/createOrder',\n    async (order) => {\n      const response = await createOrder(order);\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\nexport const updateOrderAsync = createAsyncThunk(\n    'order/updateOrder',\n    async (order) => {\n      const response = await updateOrder(order);\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n  \nexport const fetchAllOrdersAsync = createAsyncThunk(\n    'order/fetchAllOrders',\n    async ({sort, pagination}) => {\n      const response = await fetchAllOrders(sort,pagination);\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n\nexport const orderSlice=createSlice({\n    name:\"order\",\n    initialState:{\n        orders: [],\n        status: 'idle',\n        currentOrder: null,\n        totalOrders: 0\n    },\n    reducers:{\n        resetOrder: (state) => {\n            state.currentOrder = null;\n        },\n    },\n    extraReducers:(builder)=>{\n        builder.addCase(createOrderAsync.pending, (state) => { })\n        .addCase(createOrderAsync.fulfilled, (state) => { })\n        .addCase(createOrderAsync.rejected, (state) => { })\n\n        builder.addCase(updateOrderAsync.pending, (state) => { })\n        .addCase(updateOrderAsync.fulfilled, (state) => { })\n        .addCase(updateOrderAsync.rejected, (state) => { })\n\n        builder.addCase(fetchAllOrdersAsync.pending, (state) => { })\n        .addCase(fetchAllOrdersAsync.fulfilled, (state) => { })\n        .addCase(fetchAllOrdersAsync.rejected, (state) => { })\n    }\n\n});\n\nexport default orderSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,WAAW,QAAQ,0BAA0B;AACtDC,EAAE;AACF,OAAO,MAAMC,gBAAgB,GAAGJ,gBAAgB,CAC5C,mBAAmB,EACnB,MAAOK,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMJ,WAAW,CAACG,KAAK,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACJ,CAAC;AACD,OAAO,MAAMC,gBAAgB,GAAGR,gBAAgB,CAC5C,mBAAmB,EACnB,MAAOK,KAAK,IAAK;EACf,MAAMC,QAAQ,GAAG,MAAMG,WAAW,CAACJ,KAAK,CAAC;EACzC;EACA,OAAOC,QAAQ,CAACC,IAAI;AACtB,CACJ,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAGV,gBAAgB,CAC/C,sBAAsB,EACtB,OAAO;EAACW,IAAI;EAAEC;AAAU,CAAC,KAAK;EAC5B,MAAMN,QAAQ,GAAG,MAAMO,cAAc,CAACF,IAAI,EAACC,UAAU,CAAC;EACtD;EACA,OAAON,QAAQ,CAACC,IAAI;AACtB,CACJ,CAAC;AAED,OAAO,MAAMO,UAAU,GAACb,WAAW,CAAC;EAChCc,IAAI,EAAC,OAAO;EACZC,YAAY,EAAC;IACTC,MAAM,EAAE,EAAE;IACVC,MAAM,EAAE,MAAM;IACdC,YAAY,EAAE,IAAI;IAClBC,WAAW,EAAE;EACjB,CAAC;EACDC,QAAQ,EAAC;IACLC,UAAU,EAAGC,KAAK,IAAK;MACnBA,KAAK,CAACJ,YAAY,GAAG,IAAI;IAC7B;EACJ,CAAC;EACDK,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CAACC,OAAO,CAACtB,gBAAgB,CAACuB,OAAO,EAAGJ,KAAK,IAAK,CAAE,CAAC,CAAC,CACxDG,OAAO,CAACtB,gBAAgB,CAACwB,SAAS,EAAGL,KAAK,IAAK,CAAE,CAAC,CAAC,CACnDG,OAAO,CAACtB,gBAAgB,CAACyB,QAAQ,EAAGN,KAAK,IAAK,CAAE,CAAC,CAAC;IAEnDE,OAAO,CAACC,OAAO,CAAClB,gBAAgB,CAACmB,OAAO,EAAGJ,KAAK,IAAK,CAAE,CAAC,CAAC,CACxDG,OAAO,CAAClB,gBAAgB,CAACoB,SAAS,EAAGL,KAAK,IAAK,CAAE,CAAC,CAAC,CACnDG,OAAO,CAAClB,gBAAgB,CAACqB,QAAQ,EAAGN,KAAK,IAAK,CAAE,CAAC,CAAC;IAEnDE,OAAO,CAACC,OAAO,CAAChB,mBAAmB,CAACiB,OAAO,EAAGJ,KAAK,IAAK,CAAE,CAAC,CAAC,CAC3DG,OAAO,CAAChB,mBAAmB,CAACkB,SAAS,EAAGL,KAAK,IAAK,CAAE,CAAC,CAAC,CACtDG,OAAO,CAAChB,mBAAmB,CAACmB,QAAQ,EAAGN,KAAK,IAAK,CAAE,CAAC,CAAC;EAC1D;AAEJ,CAAC,CAAC;AAEF,eAAeT,UAAU,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}