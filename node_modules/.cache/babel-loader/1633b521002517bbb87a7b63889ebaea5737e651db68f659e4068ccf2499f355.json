{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { loginUser } from \"../services/authService\";\nexport const loginUserAsync = createAsyncThunk(\"user/loginUser\", async (loginInfo, {\n  rejectWithValue\n}) => {\n  try {\n    const response = loginUser(loginInfo);\n    ret;\n  } catch (error) {\n    return rejectWithValue(error);\n  }\n});\nexport const authSlice = createSlice({\n  name: 'auth',\n  initialState: {},\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase();\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginUser","loginUserAsync","loginInfo","rejectWithValue","response","ret","error","authSlice","name","initialState","reducers","extraReducers","builder","addCase","reducer"],"sources":["/home/bharat/myprojects/myecommerce-app/react-ecommerce/src/redux/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { loginUser } from \"../services/authService\";\n\nexport const loginUserAsync=createAsyncThunk(\n    \"user/loginUser\",\n    async (loginInfo, { rejectWithValue })=>{\n        try {\n            const response=loginUser(loginInfo);\n            ret\n        } catch (error) {\n            return rejectWithValue(error);\n        }\n    }\n    )\nexport const authSlice=createSlice({\n    name:'auth',\n    initialState:{},\n    reducers:{},\n    extraReducers:(builder)=>{\n        builder.addCase()\n    }\n})\n\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,SAAS,QAAQ,yBAAyB;AAEnD,OAAO,MAAMC,cAAc,GAACH,gBAAgB,CACxC,gBAAgB,EAChB,OAAOI,SAAS,EAAE;EAAEC;AAAgB,CAAC,KAAG;EACpC,IAAI;IACA,MAAMC,QAAQ,GAACJ,SAAS,CAACE,SAAS,CAAC;IACnCG,GAAG;EACP,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAOH,eAAe,CAACG,KAAK,CAAC;EACjC;AACJ,CACA,CAAC;AACL,OAAO,MAAMC,SAAS,GAACR,WAAW,CAAC;EAC/BS,IAAI,EAAC,MAAM;EACXC,YAAY,EAAC,CAAC,CAAC;EACfC,QAAQ,EAAC,CAAC,CAAC;EACXC,aAAa,EAAEC,OAAO,IAAG;IACrBA,OAAO,CAACC,OAAO,CAAC,CAAC;EACrB;AACJ,CAAC,CAAC;AAEF,eAAeN,SAAS,CAACO,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}