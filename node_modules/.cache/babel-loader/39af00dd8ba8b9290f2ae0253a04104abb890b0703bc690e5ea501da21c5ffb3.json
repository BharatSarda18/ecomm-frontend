{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { addToCart, fetchItemsByUserId, updateCart, deleteItemFromCart, resetCart } from \"../services/cartService\";\nexport const addToCartAsync = createAsyncThunk('cart/addToCart', async ({\n  newItem\n}) => {\n  console.log(newItem, \"newItemslice\");\n  const response = await addToCart(newItem);\n  //  alert.success('Item Added to Cart');\n\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const addToCartAsyncAdmin = createAsyncThunk('cart/addToCart/', async ({\n  newItem\n}) => {\n  console.log(newItem, \"newItemslice\");\n  const response = await addToCart(newItem);\n  //  alert.success('Item Added to Cart');\n\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchItemsByUserIdAsync = createAsyncThunk('cart/fetchItemsByUserId', async () => {\n  const response = await fetchItemsByUserId();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateCartAsync = createAsyncThunk('cart/updateCart', async update => {\n  const response = await updateCart(update);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const deleteItemFromCartAsync = createAsyncThunk('cart/deleteItemFromCart', async itemId => {\n  const response = await deleteItemFromCart(itemId);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const resetCartAsync = createAsyncThunk('cart/resetCart', async () => {\n  const response = await resetCart();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    status: 'idle',\n    items: [],\n    cartLoaded: false\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(addToCartAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(addToCartAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      console.log(action.payload, \"actionpay\");\n      state.items.push(action.payload.data);\n    }).addCase(addToCartAsync.rejected, state => {}).addCase(fetchItemsByUserIdAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchItemsByUserIdAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.items = action.payload.data;\n      state.cartLoaded = true;\n    }).addCase(fetchItemsByUserIdAsync.rejected, state => {\n      state.status = 'idle';\n      state.cartLoaded = true;\n    }).addCase(updateCartAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateCartAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      const index = state.items.findIndex(item => item.id === action.payload.data.id);\n      state.items[index] = action.payload.data;\n    }).addCase(updateCartAsync.rejected, state => {}).addCase(deleteItemFromCartAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(deleteItemFromCartAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      const index = state.items.findIndex(item => item.id === action.payload.data.id);\n      state.items.splice(index, 1);\n    }).addCase(deleteItemFromCartAsync.rejected, state => {}).addCase(resetCartAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(resetCartAsync.fulfilled, state => {\n      state.status = 'idle';\n      state.items = [];\n    }).addCase(resetCartAsync.rejected, state => {});\n  }\n});\nexport default cartSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","addToCart","fetchItemsByUserId","updateCart","deleteItemFromCart","resetCart","addToCartAsync","newItem","console","log","response","data","addToCartAsyncAdmin","fetchItemsByUserIdAsync","updateCartAsync","update","deleteItemFromCartAsync","itemId","resetCartAsync","cartSlice","name","initialState","status","items","cartLoaded","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","push","rejected","index","findIndex","item","id","splice","reducer"],"sources":["/home/bharat/myprojects/myecommerce-app/react-ecommerce/src/redux/cartSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { addToCart,fetchItemsByUserId,updateCart,deleteItemFromCart,resetCart } from \"../services/cartService\";\n\nexport const addToCartAsync = createAsyncThunk(\n    'cart/addToCart',\n    async ({newItem, }) => {\n      console.log(newItem,\"newItemslice\")\n      const response = await addToCart(newItem);\n    //  alert.success('Item Added to Cart');\n  \n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n\nexport const addToCartAsyncAdmin = createAsyncThunk(\n  'cart/addToCart/',\n  async ({newItem, }) => {\n    console.log(newItem,\"newItemslice\")\n    const response = await addToCart(newItem);\n  //  alert.success('Item Added to Cart');\n\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n  \nexport const fetchItemsByUserIdAsync = createAsyncThunk(\n    'cart/fetchItemsByUserId',\n    async () => {\n      const response = await fetchItemsByUserId();\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n  \nexport const updateCartAsync = createAsyncThunk(\n    'cart/updateCart',\n    async (update) => {\n      const response = await updateCart(update);\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n  \nexport const deleteItemFromCartAsync = createAsyncThunk(\n    'cart/deleteItemFromCart',\n    async (itemId) => {\n      const response = await deleteItemFromCart(itemId);\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n  \nexport const resetCartAsync = createAsyncThunk(\n    'cart/resetCart',\n    async () => {\n      const response = await resetCart();\n      // The value we return becomes the `fulfilled` action payload\n      return response.data;\n    }\n);\n\nexport const cartSlice=createSlice({\n    name:'cart',\n    initialState:{\n        status: 'idle',\n        items: [],\n        cartLoaded: false\n    },\n    reducers:{},\n    extraReducers:(builder)=>{\n        builder.addCase(addToCartAsync.pending, (state) => {\n          state.status = 'loading';\n         })\n        .addCase(addToCartAsync.fulfilled, (state,action) => {\n          state.status = 'idle';\n          console.log(action.payload,\"actionpay\");\n        state.items.push(action.payload.data);\n         })\n        .addCase(addToCartAsync.rejected, (state) => { })\n\n        .addCase(fetchItemsByUserIdAsync.pending, (state) => {\n          state.status = 'loading';\n         })\n        .addCase(fetchItemsByUserIdAsync.fulfilled, (state,action) => {\n          state.status = 'idle';\n          state.items = action.payload.data;\n          state.cartLoaded = true;\n         })\n        .addCase(fetchItemsByUserIdAsync.rejected, (state) => {\n          state.status = 'idle';\n          state.cartLoaded = true;\n         })\n\n        .addCase(updateCartAsync.pending, (state) => { \n          state.status = 'loading';\n        })\n        .addCase(updateCartAsync.fulfilled, (state,action) => {\n          state.status = 'idle';\n        const index =  state.items.findIndex(item=>item.id===action.payload.data.id)\n        state.items[index] = action.payload.data;\n         })\n        .addCase(updateCartAsync.rejected, (state) => { })\n\n        .addCase(deleteItemFromCartAsync.pending, (state) => { \n          state.status = 'loading';\n        })\n        .addCase(deleteItemFromCartAsync.fulfilled, (state,action) => {\n          state.status = 'idle';\n          const index =  state.items.findIndex(item=>item.id===action.payload.data.id)\n          state.items.splice(index,1);\n         })\n        .addCase(deleteItemFromCartAsync.rejected, (state) => { })\n\n        .addCase(resetCartAsync.pending, (state) => {\n          state.status = 'loading';\n         })\n        .addCase(resetCartAsync.fulfilled, (state) => { \n          state.status = 'idle';\n          state.items = [];\n        })\n        .addCase(resetCartAsync.rejected, (state) => { })\n    }\n\n})\n\nexport default cartSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}